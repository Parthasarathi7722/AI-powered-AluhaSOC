version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MODEL_PATH=/app/models/llama2-7b
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./models:/app/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  log-agents:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: python -m agents.run_agents
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - SPLUNK_HOST=${SPLUNK_HOST}
      - SPLUNK_PORT=${SPLUNK_PORT}
      - SPLUNK_USERNAME=${SPLUNK_USERNAME}
      - SPLUNK_PASSWORD=${SPLUNK_PASSWORD}
      - WAZUH_HOST=${WAZUH_HOST}
      - WAZUH_PORT=${WAZUH_PORT}
      - WAZUH_API_KEY=${WAZUH_API_KEY}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_ORG_ID=${GCP_ORG_ID}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp-credentials.json
    volumes:
      - ./config:/app/config
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/app/config/gcp-credentials.json:ro
    depends_on:
      rabbitmq:
        condition: service_healthy

  analysis:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: python -m analysis.run_analysis
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MODEL_PATH=/app/models/llama2-7b
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./config:/app/config
      - ./models:/app/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  rabbitmq_data:
  redis_data: 